buildscript {
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'org.apache.commons:commons-lang3:3.10'
        classpath 'io.fabric.tools:gradle:1.31.2'
        classpath 'com.android.tools.build:gradle:4.0.1'
    }
}
def githubProperties = new Properties()
if (rootProject.file("github.properties").exists()) {
    githubProperties.load(new FileInputStream(rootProject.file("github.properties")))
}
allprojects {
    repositories {
        maven { url 'https://maven.google.com' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://maven.fabric.io/public' }
        maven {

            name = "GitHubPackages"

            url = uri("https://maven.pkg.github.com/Digital-Square-Tanzania/opensrp-client-chw-core")
            credentials {
                username = githubProperties['gpr.usr'] ?: System.getenv("GITHUB_ACTOR")
                password = githubProperties['gpr.key'] ?: System.getenv("GITHUB_TOKEN")
            }

        }

        mavenLocal()
    }
}

apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'io.fabric'
apply from: "jacoco.gradle"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

jacoco {
    toolVersion = "0.8.5"
}

android {
    useLibrary 'org.apache.http.legacy'
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "org.smartregister.chw"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode 2
        versionName "0.2.1"
        multiDexEnabled true
        buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
        buildConfigField "boolean", "TIME_CHECK", "false"
        buildConfigField "String", "SYNC_TYPE", '"teamId"'
        buildConfigField "int", "MAX_SYNC_RETRIES", '3'
        buildConfigField "long", "BUILD_TIMESTAMP", System.currentTimeMillis() + "L"
        buildConfigField "boolean", "IS_SYNC_SETTINGS", "false"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }

        if (project.rootProject.file("local.properties").exists()) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file("local.properties").newDataInputStream())
            if (properties != null &&
                    properties.containsKey("mapbox.sdk.token")) {
                buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", properties["mapbox.sdk.token"]
            } else {
                println("Mapbox key config variables is not set in your local.properties")
                buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
            }

        } else {
            println("local.properties does not exist")
            buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", "\"sample_key\""
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    buildTypes {

        release {
            //debuggable true // Useful when debugging release builds
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '500'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '500'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "boolean", "TIME_CHECK", "true"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '15'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '30'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '180'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '180'
            buildConfigField "int", "HOME_VISIT_MINUTES", '60'
            buildConfigField "int", "REPORT_INDICATOR_GENERATION_MINUTES", '120'
            buildConfigField "int", "BASE_PNC_CLOSE_MINUTES", '1440'
            buildConfigField "int", "SCHEDULE_SERVICE_MINUTES", '720'
            buildConfigField "int", "STOCK_USAGE_REPORT_MINUTES", '1440'
            buildConfigField "boolean", "USE_UNIFIED_REFERRAL_APPROACH", "true"
            buildConfigField "boolean", "BUILD_FOR_BORESHA_AFYA_SOUTH", "true"
        }

        debug {
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '30'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '15'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "boolean", "TIME_CHECK", "false"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '15'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '30'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '15'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '15'
            buildConfigField "int", "HOME_VISIT_MINUTES", '60'
            buildConfigField "int", "REPORT_INDICATOR_GENERATION_MINUTES", '120'
            buildConfigField "int", "BASE_PNC_CLOSE_MINUTES", '1440'
            buildConfigField "int", "SCHEDULE_SERVICE_MINUTES", '360'
            buildConfigField "int", "STOCK_USAGE_REPORT_MINUTES", '1440'
            buildConfigField "boolean", "USE_UNIFIED_REFERRAL_APPROACH", "true"
            buildConfigField "boolean", "BUILD_FOR_BORESHA_AFYA_SOUTH", "true"
            testCoverageEnabled true
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/INDEX.LIST'
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
        unitTests.all {
            systemProperty 'robolectric.enabledSdks', '28'
            jvmArgs '-noverify'
        }
    }

    configurations.all {
        resolutionStrategy {
            force 'androidx.appcompat:appcompat:1.0.2'
            force 'com.google.android.material:material:1.0.0'
        }
    }

    flavorDimensions 'baseDimension'
    productFlavors {
        nacp {
            dimension = 'baseDimension'
            applicationIdSuffix ".moh"
            versionCode 15
            versionName "1.2.0"
            buildConfigField "String", 'opensrp_url', '"https://ucs.nacp.go.tz/opensrp/"'
            buildConfigField "String", 'guidebooks_url', '"https://opensrp.s3.amazonaws.com/media/ba/"'
//            buildConfigField "String", 'opensrp_url_debug', '"http://50.116.15.4:8082/opensrp/"'
            buildConfigField "String", 'opensrp_url_debug', '"http://170.187.199.69:8082/opensrp/"'
            buildConfigField "String[]", "LOCATION_HIERACHY", '{"Country","Region","District","Ward" , "MOH Jhpiego Facility Name", "Health Facility", "Village", "Village Sublocations"}'
            buildConfigField "String[]", "ALLOWED_LOCATION_LEVELS", '{"Ward" , "Facility", "Health Facility", "Village", "Village Sublocations"}'
            buildConfigField "String[]", "ALLOWED_LOCATION_LEVELS_DEBUG", '{"Ward", "Facility", "Health Facility", "Village", "Village Sublocations"}'
            buildConfigField "String", 'DEFAULT_LOCATION', '"Village Sublocations"'
            buildConfigField "String", 'DEFAULT_LOCATION_DEBUG', '"Village"'
            buildConfigField "long", "MAPBOX_DOWNLOAD_TILE_LIMIT", "6001"

            buildConfigField "int", "DATABASE_VERSION", '27'
        }
    }

    dataBinding {
        enabled = true
    }

    bundle {
        language {
            // Specifies that the app bundle should not support
            // configuration APKs for language resources. These
            // resources are instead packaged with each base and
            // dynamic feature APK.
            enableSplit = false
        }
    }
}

dependencies {
    implementation('org.smartregister:opensrp-client-chw-core:1.6.0-ALPHA-MOH-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'androidx.legacy', module: 'legacy-support-v4'
        exclude group: 'androidx.appcompat', module: 'appcompat'
        exclude group: 'androidx.constraintlayout', module: 'constraintlayout'
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.mcxiaoke.volley', module: 'library'
        exclude group: 'com.rengwuxian.materialedittext', module: 'library'
    }
    implementation 'com.mapbox.mapboxsdk:mapbox-sdk-turf:5.1.0'
    implementation('io.ona.kujaku:library:0.9.0') {
        exclude group: 'com.android.volley', module: 'volley'
        exclude group: 'stax', module: 'stax-api'
    }

    //Do not upgrade to 1.1.0 due to compatibility issues
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    //Do not upgrade to 1.1.0 due to compatibility issues
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation 'com.android.support:multidex:1.0.3'
    //Do not upgrade to 24.jre-1 due to compatibility issues
    implementation 'com.google.guava:guava:20.0'
    implementation 'androidx.webkit:webkit:1.7.0'
    implementation 'com.whiteelephant:monthandyearpicker:1.3.0'
    testImplementation project(path: ':opensrp-chw')
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'org.mockito:mockito-android:3.4.0'

    implementation 'com.github.lecho:hellocharts-android:1.5.8@aar'

    testImplementation "org.koin:koin-test:2.0.1"
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation 'org.robolectric:shadows-multidex:4.3.1'
    testImplementation 'org.robolectric:shadows-support-v4:3.4-rc2'
    testImplementation 'androidx.test:core:1.5.0'
    implementation 'com.intuit.ssp:ssp-android:1.0.6'
}

def flavors = android.productFlavors.collect { flavor -> flavor.name }
if (!flavors) flavors.add('')

def testDependencies = []
flavors.each { productFlavorName ->
    testDependencies.add("test${productFlavorName.capitalize()}DebugUnitTest")
    testDependencies.add("create${productFlavorName.capitalize()}DebugCoverageReport")
}

// task jacocoTestReport(type: JacocoReport, dependsOn: testDependencies.take(2)) {
task jacocoTestReport(type: JacocoReport, dependsOn: [
        'testNacpDebugUnitTest', 'createNacpDebugCoverageReport'
]) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/baDebug/classes/", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testBaDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    maxHeapSize = "3g"
}

tasks.coveralls {
    dependsOn 'jacocoTestReport'
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
    sourceDirs = ["$project.projectDir/src/main/java"]
}
